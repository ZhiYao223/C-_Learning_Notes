//构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动协调调用，无需手动调用
//析构函数: 主要作用在于对象销毁前系统自动调用，执行一些清理工作
#if 0
构造函数法： 类名() {}
1.构造函数，没有返回值也不写void
2.函数名与类名相同
3.构造函数可以有参数。因此可以发生重载
4.程序在调用对象时，会自动协调

1.构析函数语法：~类名() {}
2.构析函数，没有返回值也不写void
3.构析函数不可以有参数，因此不可能发生重载
程序在对象销毁前会自动调用析构，无需手动调用，且只能会调用一次
#endif

#include <iostream>
using namespace std;

class People0
{
public:
	//构造函数，没有返回值，不加void、int等,
	People0() //函数名和类名Person相同，函数括号里可以有参数，由编译器自动调用一次
	{
		cout << "Person构造函数的调用" << endl;
	}
	//析构函数
	~People0()//不能加参数，对象被销毁前，系统调用该函数
	{
		cout << "Person的析构函数调用" << endl;
	}
};



//2.析构函数，进行清理操作，
void test1()
{
	People0 w;  //在栈上的数据，test01函数执行完毕后，p就被释放了，所以会继续调用析构函数
}

int main63()
{
	test1();
	//People w;       //如果在main函数中调用

	system("pause"); //程序中断在此，并没有结束，所以没释放局部变量
	return 0;   //结束后，瞬间显示调用析构函数
}